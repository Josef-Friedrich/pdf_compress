"""
This type stub file was generated by pyright.
"""

run = ...
state = ...
identifier = ...
tmp_identifier = ...
args = ...
dependencies = ...
def check_threshold(value): # -> str:
    """
    Check if `value` is a valid threshold value.

    :param value:
    :type value: integer or string

    :return: A normalized threshold string (`90%`)
    :rtype: string
    """
    ...

def get_parser(): # -> ArgumentParser:
    """The argument parser for the command line interface.

    :return: A ArgumentParser object.
    :rtype: argparse.ArgumentParser
    """
    ...

def do_magick_convert(input_file, output_file, threshold=..., enlighten_border=..., border=..., resize=..., deskew=..., trim=..., color=..., quality=..., blur=...):
    """
    Convert a input image file using the subcommand convert of the
    imagemagick suite.

    :return: The output image file.
    :rtype: jfscripts._utils.FilePath
    """
    ...

def do_magick_identify(input_file): # -> dict[str, int]:
    """The different informations of an image.

    :param input_file: The input file.
    :type input_file: jfscripts._utils.FilePath

    :return: A directory with the keys `width`, `height` and `colors`.
    :rtype: dict
    """
    ...

def do_pdfimages(pdf_file, state, page_number=..., use_tmp_identifier=...): # -> CompletedProcess[str]:
    """Convert a PDF file to images in the TIFF format.

    :param pdf_file: The input file.
    :type pdf_file: jfscripts._utils.FilePath
    :param state: The state object.
    :type state: jfscripts.pdf_compress.State
    :param int page_number: Extract only the page with a specific page number.

    :return: The return value of `subprocess.run`.
    :rtype: subprocess.CompletedProcess
    """
    ...

def do_pdfinfo_page_count(pdf_file): # -> int:
    """Get the amount of pages a PDF files have.

    :param str pdf_file: Path of the PDF file.

    :return: Page count
    :rtype: int
    """
    ...

def do_pdftk_cat(pdf_files, state): # -> None:
    """Join a list of PDF files into a single PDF file using the tool `pdftk`.

    :param list pdf_files: a list of PDF files
    :param state: The state object.
    :type state: jfscripts.pdf_compress.State

    :return: None
    """
    ...

def do_tesseract(input_file, languages=...): # -> CompletedProcess[str]:
    ...

def collect_images(state): # -> list[Unknown]:
    """Collection all images using the temporary identifier in a common path.

    :param state: The state object.
    :type state: jfscripts.pdf_compress.State

    :return: A sorted list of image paths.
    :rtype: list
    """
    ...

def cleanup(state): # -> None:
    """Delete all images using the temporary identifier in a common path.

    :param state: The state object.
    :type state: jfscripts.pdf_compress.State

    :return: None"""
    ...

def unify_page_size(input_file, output_file, margin=...): # -> None:
    ...

def subcommand_convert_file(arguments):
    """Manipulate one input file

    :param tuple arguments: A tuple containing two elements: The first element
      is the input_file file object and the second element is the state object.
    """
    ...

def subcommand_join_convert_pdf(arguments):
    ...

def subcommand_samples(input_file, state): # -> None:
    """Generate a list of example files with different threshold values.

    :param input_file: The input file.
    :type input_file: jfscripts._utils.FilePath
    :param state: The state object.
    :type state: jfscripts.pdf_compress.State

    :return: None
    """
    ...

class Timer:
    """Class to calculate the execution time. Mainly to test the speed
    improvements of the multiprocessing implementation."""
    def __init__(self) -> None:
        ...
    
    def stop(self): # -> str:
        """Stop the time calculation and return the formated result.

        :return: The result
        :rtype: str
        """
        ...
    


class State:
    """This object holds runtime data for the multiprocessing environment."""
    def __init__(self, args) -> None:
        ...
    


def convert_file_paths(files): # -> list[Unknown]:
    """Convert a list of file paths in a list of
    :class:`jfscripts._utils.FilePath` objects.

    :param list files: A list of file paths

    :return: a list of  :class:`jfscripts._utils.FilePath` objects.
    """
    ...

def main(): # -> None:
    """Main function.

    :return: None
    """
    ...

if __name__ == '__main__':
    ...
