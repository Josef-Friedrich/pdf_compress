"""
This type stub file was generated by pyright.
"""

class Run:
    PIPE = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def setup(self, verbose=..., colorize=...): # -> None:
        ...
    
    def run(self, *args, **kwargs): # -> CompletedProcess[str]:
        """
        :return: A `CompletedProcess` object.
        :rtype: subprocess.CompletedProcess
        """
        ...
    
    def check_output(self, *args, **kwargs): # -> str:
        ...
    


def check_dependencies(*executables, raise_error=...): # -> bool:
    """Check if the given executables are existing in $PATH.

    :param tuple executables: A tuple of executables to check for their
      existence in $PATH. Each element of the tuple can be either a string
      (e. g. `pdfimages`) or a itself a tuple `('pdfimages', 'poppler')`.
      The first entry of this tuple is the name of the executable the second
      entry is a description text which is displayed in the raised exception.

    :param bool raise_error: Raise an error if an executable doesnâ€™t exist.

    :return: True or False. True if all executables exist. False if one or
      more executables not exist.
    :rtype: bool
    """
    ...

class FilePath:
    def __init__(self, path, absolute=...) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def new(self, extension=..., append=..., del_substring=...): # -> FilePath:
        """
        :param str extension: The extension of the new file path.
        :param str append: String to append on the basename. This string
          is located before the extension.
        :param str del_substring: String to delete from the new file path.

        :return: A new file path object.
        :rtype: FilePath
        """
        ...
    
    def remove(self): # -> None:
        """Remove the file."""
        ...
    


def argparser_to_readme(argparser, template=..., destination=..., indentation=..., placeholder=...): # -> None:
    """Add the formatted help output of a command line utility using the
    Python module `argparse` to a README file. Make sure to set the name
    of the program (`prop`) or you get strange program names.

    :param object argparser: The argparse parser object.
    :param str template: The path of a template text file containing the
      placeholder. Default: `README-template.md`
    :param str destination: The path of the destination file. Default:
      `README.me`
    :param int indentation: Indent the formatted help output by X spaces.
      Default: 0
    :param str placeholder: Placeholder string that gets replaced by the
      formatted help output. Default: `{{ argparse }}`
    """
    ...

